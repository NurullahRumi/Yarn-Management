/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.mu.cmt.pfs.pfsdb.service.PfsdbQueryExecutorService;
import com.mu.cmt.pfs.pfsdb.models.query.*;

@RestController(value = "Pfsdb.QueryExecutionController")
@RequestMapping("/pfsdb/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private PfsdbQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/qryYM650_WGTUOM", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get WGTUOM list")
    public Page<QryYm650WgtuomResponse> executeQryYM650_WGTUOM(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryYM650_WGTUOM");
        Page<QryYm650WgtuomResponse> _result = queryService.executeQryYM650_WGTUOM(pageable);
        LOGGER.debug("got the result for named query: qryYM650_WGTUOM, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryYM650_WGTUOM")
    @RequestMapping(value = "/queries/qryYM650_WGTUOM/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryYM650_WGTUOM(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryYM650_WGTUOM");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryYM650_WGTUOM";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryYM650_WGTUOM( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryYM650_MATDIAMETER_UOM", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get MATDIAMETER_UOM list")
    public Page<QryYm650MatdiameterUomResponse> executeQryYM650_MATDIAMETER_UOM(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryYM650_MATDIAMETER_UOM");
        Page<QryYm650MatdiameterUomResponse> _result = queryService.executeQryYM650_MATDIAMETER_UOM(pageable);
        LOGGER.debug("got the result for named query: qryYM650_MATDIAMETER_UOM, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryYM650_MATDIAMETER_UOM")
    @RequestMapping(value = "/queries/qryYM650_MATDIAMETER_UOM/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryYM650_MATDIAMETER_UOM(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryYM650_MATDIAMETER_UOM");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryYM650_MATDIAMETER_UOM";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryYM650_MATDIAMETER_UOM( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryYM650_MATCPS", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get MATCPS")
    public Page<QryYm650MatcpsResponse> executeQryYM650_MATCPS(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryYM650_MATCPS");
        Page<QryYm650MatcpsResponse> _result = queryService.executeQryYM650_MATCPS(pageable);
        LOGGER.debug("got the result for named query: qryYM650_MATCPS, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryYM650_MATCPS")
    @RequestMapping(value = "/queries/qryYM650_MATCPS/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryYM650_MATCPS(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryYM650_MATCPS");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryYM650_MATCPS";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryYM650_MATCPS( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryYM650_MATORI", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get MATORI list")
    public Page<QryYm650MatoriResponse> executeQryYM650_MATORI(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryYM650_MATORI");
        Page<QryYm650MatoriResponse> _result = queryService.executeQryYM650_MATORI(pageable);
        LOGGER.debug("got the result for named query: qryYM650_MATORI, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryYM650_MATORI")
    @RequestMapping(value = "/queries/qryYM650_MATORI/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryYM650_MATORI(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryYM650_MATORI");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryYM650_MATORI";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryYM650_MATORI( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryYM650_itemcod", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get itemcod")
    public Page<QryYm650ItemcodResponse> executeQryYM650_itemcod(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryYM650_itemcod");
        Page<QryYm650ItemcodResponse> _result = queryService.executeQryYM650_itemcod(pageable);
        LOGGER.debug("got the result for named query: qryYM650_itemcod, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryYM650_itemcod")
    @RequestMapping(value = "/queries/qryYM650_itemcod/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryYM650_itemcod(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryYM650_itemcod");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryYM650_itemcod";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryYM650_itemcod( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getqrymindate", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "minimum date for receive  date")
    public Page<GetqrymindateResponse> executeGetqrymindate(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getqrymindate");
        Page<GetqrymindateResponse> _result = queryService.executeGetqrymindate(pageable);
        LOGGER.debug("got the result for named query: getqrymindate, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getqrymindate")
    @RequestMapping(value = "/queries/getqrymindate/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetqrymindate(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getqrymindate");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getqrymindate";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetqrymindate( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qrySy9200pk0Progurl", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "fetch program url")
    public QrySy9200pk0progurlResponse executeQrySy9200pk0Progurl(@RequestParam(value = "pWmprogid", required = false) String pwmprogid, @RequestParam(value = "pParamList", required = false) String pparamList, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qrySy9200pk0Progurl");
        QrySy9200pk0progurlResponse _result = queryService.executeQrySy9200pk0Progurl(pwmprogid, pparamList);
        LOGGER.debug("got the result for named query: qrySy9200pk0Progurl, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/qryYM100_NEWSTDWGT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get NEWSTDWGT")
    public Page<QryYm100NewstdwgtResponse> executeQryYM100_NEWSTDWGT(@RequestParam(value = "yrncod", required = false) String yrncod, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryYM100_NEWSTDWGT");
        Page<QryYm100NewstdwgtResponse> _result = queryService.executeQryYM100_NEWSTDWGT(yrncod, pageable);
        LOGGER.debug("got the result for named query: qryYM100_NEWSTDWGT, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryYM100_NEWSTDWGT")
    @RequestMapping(value = "/queries/qryYM100_NEWSTDWGT/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryYM100_NEWSTDWGT(@RequestParam(value = "yrncod", required = false) String yrncod, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryYM100_NEWSTDWGT");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryYM100_NEWSTDWGT";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryYM100_NEWSTDWGT(yrncod,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryYM100_NYRNCLR", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "List Of NYRNCLR")
    public Page<QryYm100NyrnclrResponse> executeQryYM100_NYRNCLR(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryYM100_NYRNCLR");
        Page<QryYm100NyrnclrResponse> _result = queryService.executeQryYM100_NYRNCLR(pageable);
        LOGGER.debug("got the result for named query: qryYM100_NYRNCLR, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryYM100_NYRNCLR")
    @RequestMapping(value = "/queries/qryYM100_NYRNCLR/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryYM100_NYRNCLR(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryYM100_NYRNCLR");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryYM100_NYRNCLR";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryYM100_NYRNCLR( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryYM650_MATERIALCODE", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "List MATERIALCODE")
    public Page<QryYm650MaterialcodeResponse> executeQryYM650_MATERIALCODE(@RequestParam(value = "pWMATUSERCODE", required = false) String pwmatusercode, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryYM650_MATERIALCODE");
        Page<QryYm650MaterialcodeResponse> _result = queryService.executeQryYM650_MATERIALCODE(pwmatusercode, pageable);
        LOGGER.debug("got the result for named query: qryYM650_MATERIALCODE, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryYM650_MATERIALCODE")
    @RequestMapping(value = "/queries/qryYM650_MATERIALCODE/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryYM650_MATERIALCODE(@RequestParam(value = "pWMATUSERCODE", required = false) String pwmatusercode, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryYM650_MATERIALCODE");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryYM650_MATERIALCODE";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryYM650_MATERIALCODE(pwmatusercode,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryYM650_IssueTrnnum", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Qry Issue Trnnum")
    public QryYm650IssueTrnnumResponse executeQryYM650_IssueTrnnum(@RequestParam(value = "ptrnnum", required = false) String ptrnnum, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryYM650_IssueTrnnum");
        QryYm650IssueTrnnumResponse _result = queryService.executeQryYM650_IssueTrnnum(ptrnnum);
        LOGGER.debug("got the result for named query: qryYM650_IssueTrnnum, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/qryYM650_IssueMATERIALCODE", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get MATERIALCODE")
    public Page<QryYm650IssueMaterialcodeResponse> executeQryYM650_IssueMATERIALCODE(@RequestParam(value = "pWMATUSERCODE", required = false) String pwmatusercode, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryYM650_IssueMATERIALCODE");
        Page<QryYm650IssueMaterialcodeResponse> _result = queryService.executeQryYM650_IssueMATERIALCODE(pwmatusercode, pageable);
        LOGGER.debug("got the result for named query: qryYM650_IssueMATERIALCODE, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryYM650_IssueMATERIALCODE")
    @RequestMapping(value = "/queries/qryYM650_IssueMATERIALCODE/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryYM650_IssueMATERIALCODE(@RequestParam(value = "pWMATUSERCODE", required = false) String pwmatusercode, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryYM650_IssueMATERIALCODE");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryYM650_IssueMATERIALCODE";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryYM650_IssueMATERIALCODE(pwmatusercode,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryYM650_TSTRCOD", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get TSTRCOD")
    public Page<QryYm650TstrcodResponse> executeQryYM650_TSTRCOD(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryYM650_TSTRCOD");
        Page<QryYm650TstrcodResponse> _result = queryService.executeQryYM650_TSTRCOD(pageable);
        LOGGER.debug("got the result for named query: qryYM650_TSTRCOD, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryYM650_TSTRCOD")
    @RequestMapping(value = "/queries/qryYM650_TSTRCOD/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryYM650_TSTRCOD(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryYM650_TSTRCOD");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryYM650_TSTRCOD";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryYM650_TSTRCOD( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryYM100_YRNQLTYCARE", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "List Of YRNQLTYCARE")
    public Page<QryYm100YrnqltycareResponse> executeQryYM100_YRNQLTYCARE(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryYM100_YRNQLTYCARE");
        Page<QryYm100YrnqltycareResponse> _result = queryService.executeQryYM100_YRNQLTYCARE(pageable);
        LOGGER.debug("got the result for named query: qryYM100_YRNQLTYCARE, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryYM100_YRNQLTYCARE")
    @RequestMapping(value = "/queries/qryYM100_YRNQLTYCARE/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryYM100_YRNQLTYCARE(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryYM100_YRNQLTYCARE");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryYM100_YRNQLTYCARE";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryYM100_YRNQLTYCARE( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryYM650_receiptTrnnum", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get receipt Trnnum")
    public QryYm650ReceiptTrnnumResponse executeQryYM650_receiptTrnnum(@RequestParam(value = "ptrnnum", required = false) String ptrnnum, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryYM650_receiptTrnnum");
        QryYm650ReceiptTrnnumResponse _result = queryService.executeQryYM650_receiptTrnnum(ptrnnum);
        LOGGER.debug("got the result for named query: qryYM650_receiptTrnnum, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/qrySy9200pk0FormPath", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Callin Oracle forms")
    public Page<QrySy9200pk0formPathResponse> executeQrySy9200pk0FormPath(@RequestParam(value = "pFmbpath", required = false) String pfmbpath, @RequestParam(value = "pOtherParams", required = false) String potherParams, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qrySy9200pk0FormPath");
        Page<QrySy9200pk0formPathResponse> _result = queryService.executeQrySy9200pk0FormPath(pfmbpath, potherParams, pageable);
        LOGGER.debug("got the result for named query: qrySy9200pk0FormPath, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qrySy9200pk0FormPath")
    @RequestMapping(value = "/queries/qrySy9200pk0FormPath/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQrySy9200pk0FormPath(@RequestParam(value = "pFmbpath", required = false) String pfmbpath, @RequestParam(value = "pOtherParams", required = false) String potherParams, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qrySy9200pk0FormPath");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qrySy9200pk0FormPath";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQrySy9200pk0FormPath(pfmbpath, potherParams,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryYM100_NYRNQLTY", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "List of NYRNQLTY")
    public Page<QryYm100NyrnqltyResponse> executeQryYM100_NYRNQLTY(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryYM100_NYRNQLTY");
        Page<QryYm100NyrnqltyResponse> _result = queryService.executeQryYM100_NYRNQLTY(pageable);
        LOGGER.debug("got the result for named query: qryYM100_NYRNQLTY, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryYM100_NYRNQLTY")
    @RequestMapping(value = "/queries/qryYM100_NYRNQLTY/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryYM100_NYRNQLTY(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryYM100_NYRNQLTY");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryYM100_NYRNQLTY";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryYM100_NYRNQLTY( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryYM100_SURPLUSCAT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "List Of SURPLUSCAT")
    public Page<QryYm100SurpluscatResponse> executeQryYM100_SURPLUSCAT(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryYM100_SURPLUSCAT");
        Page<QryYm100SurpluscatResponse> _result = queryService.executeQryYM100_SURPLUSCAT(pageable);
        LOGGER.debug("got the result for named query: qryYM100_SURPLUSCAT, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryYM100_SURPLUSCAT")
    @RequestMapping(value = "/queries/qryYM100_SURPLUSCAT/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryYM100_SURPLUSCAT(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryYM100_SURPLUSCAT");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryYM100_SURPLUSCAT";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryYM100_SURPLUSCAT( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryYM650_IssueTSTRCOD", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "List of TSTRCOD")
    public Page<QryYm650IssueTstrcodResponse> executeQryYM650_IssueTSTRCOD(@RequestParam(value = "fstrcod", required = false) String fstrcod, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryYM650_IssueTSTRCOD");
        Page<QryYm650IssueTstrcodResponse> _result = queryService.executeQryYM650_IssueTSTRCOD(fstrcod, pageable);
        LOGGER.debug("got the result for named query: qryYM650_IssueTSTRCOD, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryYM650_IssueTSTRCOD")
    @RequestMapping(value = "/queries/qryYM650_IssueTSTRCOD/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryYM650_IssueTSTRCOD(@RequestParam(value = "fstrcod", required = false) String fstrcod, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryYM650_IssueTSTRCOD");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryYM650_IssueTSTRCOD";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryYM650_IssueTSTRCOD(fstrcod,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryYYM650_MATCLR", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get MATCLR")
    public Page<QryYym650MatclrResponse> executeQryYYM650_MATCLR(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryYYM650_MATCLR");
        Page<QryYym650MatclrResponse> _result = queryService.executeQryYYM650_MATCLR(pageable);
        LOGGER.debug("got the result for named query: qryYYM650_MATCLR, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryYYM650_MATCLR")
    @RequestMapping(value = "/queries/qryYYM650_MATCLR/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryYYM650_MATCLR(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryYYM650_MATCLR");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryYYM650_MATCLR";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryYYM650_MATCLR( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}